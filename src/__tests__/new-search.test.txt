import { render} from '@testing-library/react';
import { useNavigate } from 'react-router-dom';

import { useContext} from 'react';
import { getUserQuery } from '../utils/localStorageActions';
import SearchForm from '../components/SearchForm/SearchForm';



jest.mock('../context/AppContext', () => ({
  useContext: jest.fn(),
}));

jest.mock('../utils/localStorageActions', () => ({
  getUserQuery: jest.fn(),
}));

describe('SearchForm', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should retrieve the value from local storage upon mounting', () => {
    const queryValue = 'test query';
    jest.spyOn(localStorage, 'getItem').mockReturnValue(queryValue);
    const setAppData = jest.fn();

    useContext.mockReturnValue({
      appdata: { query: '' },
      setappdata: setAppData,
    });

    getUserQuery.mockReturnValue(queryValue);

    render(<SearchForm />);

    expect(getUserQuery).toHaveBeenCalledTimes(1);
    expect(setAppData).toHaveBeenCalledWith({ query: queryValue });
    expect(useNavigate).toHaveBeenCalledWith('/search/test query');
  });
})